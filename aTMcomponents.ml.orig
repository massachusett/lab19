<<<<<<< HEAD
(*
                Component Behaviors of an ATM Machine

The functions here represent the component behaviors that an ATM
machine can take, including: prompting for and acquiring from the
customer some information (choosing an action or entering an account
id or an amount); presenting information to the customer; dispensing
cash.

Implementation of these behaviors is likely to require some database
of accounts, each with an id number, a customer name, and a current
balance.
 *)

 type id = int

(* Possible actions that an ATM customer can perform *)
type action =
  | Balance           (* balance inquiry *)
  | Withdraw of int   (* withdraw an amount *)
  | Deposit of int    (* deposit an amount *)
  | Next              (* finish this customer and move on to the next one *)
  | Finished          (* shut down the ATM and exit entirely *)
;; 

(*....................................................................
 Initializing database of accounts
*)

(* A specification of a customer name and initial balance for
   initializing the account database *)
type account_spec = {name : string; id : id; balance : int} ;;

(* initialize accts -- Establishes a database of accounts, each with a
   name, aribtrary id, and balance. The names and balances are
   initialized as per the `accts` provided. *)
let initialize init =
	ref init 
	in () ;;
=======
type id = int

type action =
  | Balance           
  | Withdraw of int   
  | Deposit of int    
  | Next              
  | Finished          
;; 

type account_spec = {name : string; id : id; balance : int} ;;

let input_to_int (input : string) : int =
  let i = int_of_string input in
  if i < 0 then raise (Failure "negative input")
  else i ;;

let rec acquire_id : unit -> id =
  fun () -> 
  print_string "Enter customer id: ";
  let id = read_line () in
  try input_to_int id with
  | Failure _ -> (print_string "Invalid id! Try again.";
  print_newline ();
  acquire_id ()) ;;

let rec acquire_amount : unit -> int = 
  fun () -> 
  print_string "Enter amount: ";
  let id = read_line () in
  try input_to_int id with
  | Failure _ -> (print_string "Invalid amount! Try again.";
  print_newline ();
  acquire_amount ()) ;;

let rec acquire_act : unit -> action = 
  fun () -> 
  print_string "Enter action: (B) Balance (-) Withdraw (+) Deposit (=) Done (X) Exit: ";
  match read_line () with 
  | "B" -> Balance 
  | "-" -> Withdraw (acquire_amount ())  
  | "+" -> Deposit (acquire_amount ())      
  | "=" -> Next
  | "X" -> Finished
  | _ -> print_string "Invalid action! Try again.";
         print_newline ();
         acquire_act () ;;
>>>>>>> c6b2e673584f7cf03ceaf479ac0fbe70fa95ef9a
